*****************************************************************************
*****************************************************************************
РАЗВОРАЧИВАНИЕ ПРОЕКТА
1. При работе с GIT, создайте репозиторий в существующем каталоге. Для этого
   необходимо перейти в проектный каталог и в командной строке выполнить:
   git init.
   ПРИМЕЧАНИЕ: файл .gitignore в корне проекта необходим для того, чтобы
   система контроля версий GIT не учитывала папку "node_modules", речь о
   которой пойдет в следующем пункте.
2. Для работы препроцессора css и других вспомогательных программ, в данном
   проекте, необходима программная платформа node.js, сборщик webpack, а
   также (в корне проекта) настроенный файл webpack.config.js и папка
   "node_modules" с пакетами.
   Для установки папки "node_modules" со всеми необходимимы программами:
   - Проверьте, что в корне проекта есть заполненый файл package.json;
   - Укажите/отредактируйте значения свойств: "name", "version",
    "description" и "author" в файле package.json (по необходимости);
   - Через командную строку (в корне проекта) выполните команду: npm install.
3. Для разделения html на блоки в проекте используются шаблонизатор twig в
   двух исполнениях (twig.js и twig.php). Оба варианта не зависимы друг от
   друга и приведены здесь с целью демонтсрации того, как можно организовать
   верстку. Шаблонизатор twig.js устанавливается в папку "node_modules"
   через npm (см.п.2). Шаблонизатор twig.php (папка "frontend/vendor/twig")
   устанавливается и обновляется через composer в директории "frontend".
   Ссылка на обновление composer, установку/обновление шаблонизатора twig в
   OpenServer: https://ospanel.io/docs/#rabota-s-composer
   ПРИМЕЧАНИЕ: всю работу с composer установелнным в OpenServer, необходимо
   выполнять с помощью командной строки OpenServer.
*****************************************************************************
*****************************************************************************

*****************************************************************************
*****************************************************************************
ОРГАНИЗАЦИЯ И АРХИТЕКТУРА
Организация и архитектура стилей проекта основана на:
	- методологии MCSS https://operatino.github.io/MCSS/
	- паттерне 7.1 описанном в статье https://sass-guidelin.es/
ПРИМЕЧАНИЕ:
	- базовый слой содержит стили шаблона написанные по правилам
	  проектного слоя;
	- изменен порядок подключения папок паттерна 7.1.
*****************************************************************************
*****************************************************************************

*****************************************************************************
*****************************************************************************
ПРАВИЛА НАПИСАНИЯ СТИЛЕЙ
1.  Именования классов:
	- .block - блок;
	- .block_element - элемент блока, (не более 2-х уровней вложенности);
	- .block ._modifier - модификатор блока;
	- .parent-block_element .block - переопределние блока классом элемента
	   родительского блока (только для компонент);
	- .parent-block .block - переопределние блока классом родительского
       блока (только для компонент).
*****************************************************************************

*****************************************************************************
2.  Компоненты (1_base/basic) - все переиспользуемые элементы интерфейса.
Содержат только абстрактные классы (в люой части кода не должны смотрется
чужеродно). Компоненты делятся на:
	- базовые (1_base/basic), состоящие только из одного блока;
	- составные (1_base/composite), состоящие из других компонент;
*****************************************************************************

*****************************************************************************
3.  Страницы (2_project/pages)- индивидуальные стили контента страницы.
Содержат только индивидуальные классы, т.е. название привязано к типу
седержимой иформации.

3.1 Если на странице есть блоки, которые могут отключаться/подключаться,
то их стили выносятся в отдельный файл и они помещаются в папку
(2_project/pages/blocks).

3.2 Стили страницы могут содержать собственные вложенные блоки,
используемые только на этой странице. Это необходимо, чтобы избежать
большой вложенности элементов блоков (допускается не более двух уровней
вложенности элементов на один блок).

3.3 Блоки страницы, включая собственные вложенные блоки, не
переопределяются стилями родительских блоков так как они индивидуальны и
зависят только от ширины окна браузера (т.е. у них нет переопределяющих
классов).
*****************************************************************************

*****************************************************************************
4 Оформление содержания файлов .scss (кроме файлов директории utils)

//Импорт файлов
@import 'utils/lib';
//-------------------------------

//Цвета
$btn-color: color(accent-foregraund);
$btn-color-hover: color(foregraund-light);
$btn-bg-color: color(accent-base-dark);
$btn-bg-color-disabled: color(accent-primary);
//-------------------------------

//Классы
$wrapper : '.header-nav';
$menu : '.header-menu';
$dropdown : '.list-dropdown';
//-------------------------------

//Прочие глобальные переменные
//$lib-name: var-value;??? - проверить
//-------------------------------

.class-name {
	$var-name: var-value ;(Объявление локальной переменной)
	//$lib-name: var-value1 !global;(Для перезаписи глобальной переменной)??? - проверить

	counter-increment   :   ;
	counter-reset       :   ;
	content             :   ;
	float               :   ;
	display             :   ;
	position            :   ;
	top                 :   ;
	right               :   ;
	bottom              :   ;
	left                :   ;
	box-sizing          :   ;
	table-layout        :   ;
	margin              :   ;
	padding             :   ;
	height              :   ;
	min-height          :   ;
	max-height          :   ;
	width               :   ;
	min-width           :   ;
	max-width           :   ;
	z-index             :   ;
	                        (Остальные свойства через пустую строку)
	opacity             : 0.5;    (Всегда указывайте 0 в дробных числах > 1)
	font-size           : 1.5rem; (Если планируется поддержка IE8, то в px)
	background-image    : url('/images/kittens.jpg'); (Строки в ковычках '')
	color               : (#111 + #111); (Все вычисления заключать в скобки)

	@include ...;
	@extend ....;

	@at-root {
	  (Используется для второго уровня вложенности элементов,
	  а также для вложенных блоков страниц)
	}

}
*****************************************************************************
*****************************************************************************